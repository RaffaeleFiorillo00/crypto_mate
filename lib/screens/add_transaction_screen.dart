import 'package:flutter/material.dart';
import 'package:flutter_material_pickers/flutter_material_pickers.dart';
import '../models/transaction_model.dart';
import '../services/firestore_service.dart';
import '../services/api_service.dart';
import '../utils/constants.dart';
import '../utils/helpers.dart';

class AddTransactionScreen extends StatefulWidget {
  const AddTransactionScreen({Key? key}) : super(key: key);

  @override
  State<AddTransactionScreen> createState() => _AddTransactionScreenState();
}

class _AddTransactionScreenState extends State<AddTransactionScreen> {
  final _formKey = GlobalKey<FormState>();
  final _firestoreService = FirestoreService();
  final _apiService = ApiService();
  
  String _selectedCrypto = 'BTC';
  TransactionType _transactionType = TransactionType.buy;
  final _amountController = TextEditingController();
  final _priceController = TextEditingController();
  DateTime _selectedDate = DateTime.now();
  bool _isLoading = false;
  
  List<String> _availableCryptos = [
    'BTC', 'ETH', 'USDT', 'BNB', 'SOL', 'ADA', 'XRP', 'DOT', 'DOGE', 'AVAX',
    'MATIC', 'LINK', 'UNI', 'LTC', 'BCH', 'XLM', 'ATOM', 'FTM', 'ALGO', 'VET'
  ];

  @override
  void initState() {
    super.initState();
    _loadCurrentPrice();
  }

  @override
  void dispose() {
    _amountController.dispose();
    _priceController.dispose();
    super.dispose();
  }

  Future<void> _loadCurrentPrice() async {
    try {
      final coinId = _apiService.symbolToId(_selectedCrypto);
      final prices = await _apiService.fetchCryptoPrices([coinId]);
      final currentPrice = prices[coinId];
      
      if (currentPrice != null) {
        setState(() {
          _priceController.text = currentPrice.toStringAsFixed(2);
        });
      }
    } catch (e) {
      // Handle error silently
    }
  }

  void _onCryptoChanged(String? newValue) {
    if (newValue != null) {
      setState(() {
        _selectedCrypto = newValue;
      });
      _loadCurrentPrice();
    }
  }

  void _onTransactionTypeChanged(TransactionType? newValue) {
    if (newValue != null) {
      setState(() {
        _transactionType = newValue;
      });
    }
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
    );
    
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _saveTransaction() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final amount = double.parse(_amountController.text);
      final price = double.parse(_priceController.text);
      
      final transaction = TransactionModel(
        id: '', // Will be generated by Firestore
        symbol: _selectedCrypto,
        amount: amount,
        price: price,
        type: _transactionType,
        date: _selectedDate,
      );

      // For now, use a mock user ID
      const String userId = 'mock_user_id';
      await _firestoreService.addTransaction(userId, transaction);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Transazione salvata con successo!'),
            backgroundColor: AppColors.success,
          ),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Errore nel salvataggio: $e'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Aggiungi Transazione'),
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: _isLoading
          ? const Center(
              child: CircularProgressIndicator(
                color: AppColors.primary,
              ),
            )
          : SingleChildScrollView(
              padding: const EdgeInsets.all(AppSizes.padding),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildTransactionTypeSelector(),
                    const SizedBox(height: AppSizes.spacingLarge),
                    _buildCryptoSelector(),
                    const SizedBox(height: AppSizes.spacingLarge),
                    _buildAmountField(),
                    const SizedBox(height: AppSizes.spacingLarge),
                    _buildPriceField(),
                    const SizedBox(height: AppSizes.spacingLarge),
                    _buildDateField(),
                    const SizedBox(height: AppSizes.spacingLarge),
                    _buildSaveButton(),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildTransactionTypeSelector() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Tipo di Transazione',
              style: AppTextStyles.body1.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: AppSizes.spacing),
            Row(
              children: [
                Expanded(
                  child: RadioListTile<TransactionType>(
                    title: const Text('Acquisto'),
                    value: TransactionType.buy,
                    groupValue: _transactionType,
                    onChanged: _onTransactionTypeChanged,
                    activeColor: AppColors.primary,
                  ),
                ),
                Expanded(
                  child: RadioListTile<TransactionType>(
                    title: const Text('Vendita'),
                    value: TransactionType.sell,
                    groupValue: _transactionType,
                    onChanged: _onTransactionTypeChanged,
                    activeColor: AppColors.primary,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCryptoSelector() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Criptovaluta',
              style: AppTextStyles.body1.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: AppSizes.spacing),
            DropdownButtonFormField<String>(
              value: _selectedCrypto,
              decoration: const InputDecoration(
                labelText: 'Seleziona crypto',
                border: OutlineInputBorder(),
              ),
              items: _availableCryptos.map((crypto) {
                return DropdownMenuItem<String>(
                  value: crypto,
                  child: Text(crypto),
                );
              }).toList(),
              onChanged: _onCryptoChanged,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Seleziona una criptovaluta';
                }
                return null;
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAmountField() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Quantità',
              style: AppTextStyles.body1.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: AppSizes.spacing),
            TextFormField(
              controller: _amountController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'Quantità di $_selectedCrypto',
                border: const OutlineInputBorder(),
                suffixText: _selectedCrypto,
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Inserisci la quantità';
                }
                final amount = double.tryParse(value);
                if (amount == null || amount <= 0) {
                  return 'Inserisci una quantità valida';
                }
                return null;
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPriceField() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Prezzo per Unità',
              style: AppTextStyles.body1.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: AppSizes.spacing),
            TextFormField(
              controller: _priceController,
              keyboardType: TextInputType.number,
              decoration: const InputDecoration(
                labelText: 'Prezzo in USD',
                border: OutlineInputBorder(),
                suffixText: 'USD',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Inserisci il prezzo';
                }
                final price = double.tryParse(value);
                if (price == null || price <= 0) {
                  return 'Inserisci un prezzo valido';
                }
                return null;
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDateField() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Data Transazione',
              style: AppTextStyles.body1.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: AppSizes.spacing),
            InkWell(
              onTap: _selectDate,
              child: Container(
                padding: const EdgeInsets.all(AppSizes.spacing),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(AppSizes.radius),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.calendar_today),
                    const SizedBox(width: AppSizes.spacing),
                    Text(
                      Helpers.formatDate(_selectedDate),
                      style: AppTextStyles.body1,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSaveButton() {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: _isLoading ? null : _saveTransaction,
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: AppSizes.spacing),
        ),
        child: _isLoading
            ? const SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              )
            : const Text(
                'Salva Transazione',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
              ),
      ),
    );
  }
} 